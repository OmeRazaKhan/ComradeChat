"""
Module for parsing JSON file generated by the web scraper.
"""
import json
import pandas as pd

from python.database.metadata import Dataset, MetaData


class Parser:

    def __init__(self):
        pass

    def _get_start_end_time(self, temporal_coverage: str):
        """
        Extracts the start and end dates from a string.
        """
        arr = temporal_coverage.split(" ")
        start = arr[0]
        start_dt = pd.to_datetime(start)
        end = arr[2]
        end_dt = pd.to_datetime(end)
        return start_dt, end_dt

    def _parse_data_entry(self, all_datasets: dict):
        parsed_datasets = []
        for dataset in all_datasets:
            title = dataset["title"]
            languages = dataset["languages"]
            file_type = dataset["file_type"].lower()
            miscellaneous = dataset["miscellaneous"]
            url = dataset["dataset_url"]
            parsed_datasets.append(
                Dataset(title, languages, file_type, url, miscellaneous))
        return parsed_datasets

    def parse(self, metadata_file_path: str) -> dict:
        """
        Parses a JSON file containing all metadata scraped from the open source portal.
        
        Params:
            metadata_file_path (str): The path to the file JSON containing all scraped metadata.
            
        Returns:
            (dict(id: MetaData)): The id of each metadata entry mapped to the MetaData itself.

        """
        with open(metadata_file_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        all_metadata = {}

        # Load the metadata for each key.
        for key in data:
            entry = data[key]
            keywords = entry["keywords"]
            subjects = entry["subjects"]
            audience = entry["audience"]
            temporal_coverage = entry["temporal_coverage"]
            start, end = self._get_start_end_time(temporal_coverage)
            description = entry["description"]
            data_entry = entry["data"]
            datasets = self._parse_data_entry(data_entry)
            metadata = MetaData(key, keywords, subjects,
                                audience, start, end, description, datasets)
            all_metadata[key] = metadata
        return all_metadata
